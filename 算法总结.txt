最优化问题{

	枚举、二分、贪心、构造等{
		部分枚举、部分贪心
		二分答案{
			最小值最大、最大值最小
			平均数最大/最小->最大闭合/密度子图
		}
		相邻交换法（国王游戏）：注意是否满足偏序
	}
	
	无后效性、状态图为DAG{
	
		隐式图或阶段状态不明显{
			（不爆栈）记忆化搜索{
				估算状态数目
				注意边界条件
				可用哈希表存信息
			}
			拓扑排序――》动态规划
		}
			
		显式图或阶段状态明显{
			动态规划{
			
				线型{
					LIS，O(nlogn)
					LCS
					背包问题{
						01背包、完全背包转化思路
						多重背包
						有依赖的背包
					}
				}
				
				环型{
					（以下三选一）
					复制一份变为线型
					选择一个分割点，枚举分割点的信息
					在状态中增加分割点信息
				}
					
				树型{
					森林转二叉树
					有依赖的背包
					树的重心{
						树的直径（重心：DP；直径：两次DFS）
						树的直径和重心的相关性质
						（联系）树分治
					}
					环套树（基环+外向树）{
						找环
						仙人掌上DP
						拓扑排序
					}
				}
				
				高级DP{
					状压DP、插头DP{
						位运算的define
						明确状态表示
						滚动数组
						队列（BFS）+哈希表存状态（一般在无效状态较多时使用）
					}
					单调DP{
						优化多重背包
						斜率优化
						（联系）单调队列、单调栈、单调DP、斜率优化、凸包、半平面交
					}
					决策单调性{
						四边形不等式
						猜测+对拍验证
					}
				}
			}
		}
		
		总结：类DP题目的实现方式{
			1、迭代（用于简单的DP）
			2、DFS（记忆化搜索）
			3、BFS（队列/拓扑排序）
		}
	}
	
	有后效性、状态图不为DAG{
		通过枚举/二分来增加限制――》动态规划
		
		最短路思想{
			dijkstra思想：每次确定一个不能更优的状态，并用于更新其他的状态（注意有无“负边”）
			SPFA思想：不断更新到不可能再更新为止（注意是否能在有限时间内结束，注意时间复杂度）
		}
		
		最后的选择：状态空间搜索（暴搜）{
			强剪枝、预处理、先枚举、先二分、先贪心等
			深搜
			广搜{
				双向广搜{
					同一队列/两个队列
					转移是否可逆
					扩展方向的选择
					相遇的判断
				}
			}
			各种高级启发式搜索{
				A*：直接用STL中的pq就好
				IDA*（骑士精神）
			}
		}
	}
}


数据结构{
	数组、指针
	
	抽象数据类型（ADT）{
		栈{
			括号匹配、表达式求值
			单调栈（最值左右延伸区间）：后缀数组的区间最值（左右延伸）
		}
		
		队列{
			单调队列：（联系）单调队列、单调栈、单调DP、斜率优化、凸包、半平面交
			优先队列{
				STL中的priority_queue
				可并优先队列（左偏树/斜堆）
			}
		}
		
		并查集{
			按轶合并、路径压缩
			并查集的变种：相对信息的维护（向量偏移、等价类）
		}
	}
	
	区间信息的维护和查询{
		离线算法{
			莫队
			树上莫队
		}
		
		满足区间加法（update）{
			满足区间减法或只需前缀查询和单点修改：树状数组
			
			不满足区间减法{
				不需要分裂合并：线段树――》KD树
				需要分裂合并：可持久化treap或splay
				
				总结：线段树的两种思考（维护）方式：用子树信息重新计算（update）和考虑操作对信息的影响，其中前者可拓展到splay，后者不能（因为旋转时树的形态会发生变化），但后者可以套树，前者不能（因为要重新计算大量信息，时间复杂度高），这也是splay不能套树的主要原因。
				
				补充：线段树的大小需要变化时（但不改变形态，比如每次在后面增加一个数），可以开一个足够大的线段树，用的时候只用其中一部分即可（增加个变量来保存当前使用的位置，注意要和保存整棵树大小的变量区分开来）
				
			}
		}
		
		允许区间重叠(如min,max,gcd等）：RMQ
	}
	
	嵌套数据结构：树套树
	
	分块数据结构{
		分块数组
		分块链表
	}
	
	可持久化数据结构{
		关键：从不“修改”任何东西
		可持久化线段树{
			主席树
			可持久化数组――》可持久化并查集
		}
	}
	
	树上信息的维护和查询{
		树上倍增
		树分治
		
		树链剖分――》动态树{
			路径修改：LCT
			子树修改：ETT/用splay维护DFS序
			路径修改、子树修改：top tree/AAA tree（暂时还没有写过代码）
			动态仙人掌（暂时还不会）
		}
	}
}


字符串{
	字典树（trie）
	
	KMP、扩展KMP{
		总结：对于A的每个前/后缀T，求T的前/后缀与B的前/后缀的最长的相同的长度
		前、后、前：KMP
		后、前、前：扩展KMP
		后、前、后：对反串进行KMP
		前、后、后：对反串进行扩展KMP
		
		KMP:  --->|
		     |--->
		
		扩展KMP：
			|--->
			|--->     
	}
	
	后缀数组{
		A的每个后缀和B的每个后缀的最长公共前缀LCA
		A的每个前缀和B的每个前缀的最长公共后缀LCS（对反串求后缀数组）
		
		总结：对于A的每个前/后缀T1，和B的每个前/后缀T2，求T1的前/后缀与T2的前/后缀的最长的相同的长度
		后、后、前、前：原串相连（中间加特殊字符）后求sa
		前、前、后、后：A和B都反过来，然后同上
		后、前、前、后：A不反B反
		前、后、后、前：A反B不反
	}
	
	哈希{
		哈希值的求法：类似前缀和
		注意自然溢出时，是否在剩余系中（即不能包括负数）
		注意是s[i]-'a'+1，不要漏了+1
		基于hash的LCP算法
	}
	
	有限状态自动机{
		AC自动机
		回文自动机（PAM）
		
		后缀自动机（SAM）{
			和后缀树的关系：一个串的后缀自动机就相当于其反串的后缀树
			和后缀数组的关系
		}
		
		在自动机上DP
		相关的统计性质
	}
	
	总结{
		周期性：KMP
		
		回文、对称性{
			反串
			
			manacher{
				在中间插入字符这一神奇技巧（注意两端也要插入）
				利用之前的计算结果这一思想
			}
			
			回文自动机
		}
	}
}


图论{
	最短路{
		k短路
		最小环
	}
	
	最小生成树{
		度限制生成树：标号树的purfer编码
		
		切割性质：包含最小
		回路性质：不包含最大：增量MST
		
		最小瓶颈生成树――》(每对节点间）最小瓶颈路：NOIP2013 Day1 T3的水题
		次小生成树
		
		最小有向生成树（树形图）（朱-刘算法）{
			左偏树优化
			环缩点思想（联系带花树算法）
		}
	}
	
	传递闭包――》并查集――》最小生成树
	
	深度优先遍历（DFS）{
		有向图的强连通分量――》缩点
		
		无向图的割顶和桥――》无向图的双连通分量――》缩点{
			点-双连通分量（双连通分量或块）{
				内部无割顶
				用一个栈
				可能有公共点
			}
			
			边-双连通分量{
				不经过桥即可（所有边都不是桥）
				没有公共点
			}
		}
		
		2-SAT问题（2x+xx,add,solve,需要一个栈）
		
		ETT和DFS序：用splay来维护
	}
	
	二分图匹配{
		二分图最大匹配{
			DFS/BFS两种写法（前者好写且常见，后者较快）
			最小覆盖集（由最大匹配构造而成）
			最大独立集（和最小覆盖集互补)
			
			（拓展）带花树算法{
				一般图最大匹配
				一般图带权最大匹配（暂时不会）
			}
			
			DAG最小路径覆盖
		}
		
		二分图最佳完美匹配――》slack优化（要写成BFS）
		补充：非完全图可以加上权值为0的边变为完全图
		
		稳定婚姻问题（list,order,next,a,b）
	}
	
	网络流{
		最大流――》dinic
		
		费用流{
			连续最短路算法
			zkw费用流（暂时还没有写过代码）
		}
		
		建模{
			多源多汇、节点容量
			容量下界
			
			最小割模型{
				二分图带权最小覆盖集
				二分图带权最大独立集
				
				最大闭合子图
				最大密度子图（对平均数的二分思想）
				
				平面图最小割：对偶图的构建
			}
		}
	}
	
	欧拉回路：退出时进栈
}


数学{
	基本计数方法{
		加法原理和乘法原理{
			排列――》有重复元素的全排列
			
			组合{
				可重复选择的组合
				
				二项式定理{
					二项变换
					Lucas定理
					多项式定理
				}
			}
		}
		容斥原理――》反演――》莫比乌斯反演
	}
	
	递推关系{
		catalan数列：C(2n,n)/(n+1) {
			三角划分
			+1,-1
			对角线
		}
		
		strling数
		
		错位排列：F(n)=(n-1)*[F(n-2)+F(n-1)]
		
		数位计数问题（确定前缀）{
			枚举前缀+组合计数
			数位DP
		}
	}
	
	数论{
		线性筛法――》筛积性函数{
			欧拉phi函数
			莫比乌斯函数
			积性函数性质
			重要数论函数的性质
		}
		
		费马小定理――》欧拉定理：n>1，a属于n的剩余系的缩系（a和n互质），则有a^phi(n)==1(mod n)
		
		剩余系――》模乘法的逆元{
			拓展欧几里德算法：y-=x*(a/b) {
				线性模方程（组）
				离散对数
				二次剩余（暂时还不会）
			}	
			O(n)线性求所有逆元
		}
	}
	
	博弈论――》组合游戏――》SG函数和SG定理
	
	概率和数学期望
	
	置换――》burnside引理――》polya定理（注意条件）
	
	矩阵――》矩阵乘法――》矩阵快速幂算递推
	
	高斯消元{
		无解和矛盾的情况
		判断是否线性相关
		求行列式（行列式基本定理）
	}
	
	二分法求单调函数零点
	三分法求单峰函数零点
	数值积分――》simpson积分
	
	FFT{
		注意下标从0开始
		算t2时记得乘w[n/(k<<1)*j]
	}
	
	线性规划{
		单纯性法（暂时还不会）
		对偶（暂时还不会）
		分数规划（暂时还不会）
	}
}


计算几何{
	向量{
		点积
		叉积
		旋转
		点和直线{
			直线交点
			点到直线距离
			点到线段距离
			点在直线投影
			线段相交判定
		}
		
		多边形――》多边形的有向面积
		
		圆{
			直线和圆的交点
			两圆相交
			过定点作圆的切线
			两圆的公切线
		}
		
		球{
			坐标互化
			球面距离
		}
	}
	
	常用算法{
		点在多边形内判定
		凸包――》最远点对
		半平面交
		最近点对
	}
	
	三维几何{
		直线（参数方程）
		平面（点法式）
		
		三维点积{
			过定点垂直于定直线的平面
			线面角、面面角、线线角
			点到平面距离
			点在平面上的投影
			直线和平面的交点
		}
		
		三维叉积{
			过不共线三点的平面
			三角形的有向面积
			判断点是否在三角形内
			判断线段和三角形是否相交
			点到直线/线段的距离
			四面体的体积――》多面体的体积
		}
		
		三维凸包
	}
}